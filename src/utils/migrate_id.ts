// Migrate ID of the character, weapon and artifact to use genshin-db's ID instead of
// using array indices.

import genshindb from "genshin-db"
import { Build } from "../genshin/build";


// Legacy IDs using array indices
const characters = [
    "traveleranemo",
    "travelergeo",
    "travelerelectro",
    "travelerdendro",
    "aether",
    "lumine",
    "albedo",
    "aloy",
    "amber",
    "barbara",
    "beidou",
    "bennett",
    "chongyun",
    "diluc",
    "diona",
    "eula",
    "fischl",
    "ganyu",
    "hutao",
    "jean",
    "kazuha",
    "kaeya",
    "ayaka",
    "keqing",
    "klee",
    "sara",
    "lisa",
    "mona",
    "ningguang",
    "noelle",
    "qiqi",
    "raiden",
    "razor",
    "rosaria",
    "kokomi",
    "sayu",
    "sucrose",
    "tartaglia",
    "thoma",
    "venti",
    "xiangling",
    "xiao",
    "xingqiu",
    "xinyan",
    "yanfei",
    "yoimiya",
    "zhongli",
    "gorou",
    "itto",
    "shenhe",
    "yunjin",
    "yaemiko",
    "ayato",
    "yelan",
    "kuki",
    "heizou",
    "collei",
    "dori",
    "tighnari",
    "candace",
    "cyno",
    "nilou",
    "nahida",
    "layla",
    "faruzan",
    "wanderer",
    "alhaitham",
    "yaoyao",
    "dehya",
    "mika",
    "baizhu",
    "kaveh",
    "kirara",
    "travelerhydro",
    "lyney",
    "lynette",
    "freminet",
    "neuvillette",
    "wriothesley",
    "furina",
    "charlotte",
    "navia",
    "chevreuse",
    "xianyun",
    "gaming",
    "chiori"
  ];

  
const artifects = [
    "Archaic Petra",
    "Berserker",
    "Blizzard Strayer",
    "Bloodstained Chivalry",
    "Brave Heart",
    "Crimson Witch of Flames",
    "Deepwood Memories",
    "Defender's Will",
    "Desert Pavilion Chronicle",
    "Echoes of an Offering",
    "Emblem of Severed Fate",
    "Flower of Paradise Lost",
    "Gambler",
    "Gilded Dreams",
    "Gladiator's Finale",
    "Heart of Depth",
    "Husk of Opulent Dreams",
    "Instructor",
    "Lavawalker",
    "Maiden Beloved",
    "Martial Artist",
    "Noblesse Oblige",
    "Ocean-Hued Clam",
    "Pale Flame",
    "Prayers for Destiny",
    "Prayers for Illumination",
    "Prayers for Wisdom",
    "Prayers to Springtime",
    "Resolution of Sojourner",
    "Retracing Bolide",
    "Scholar",
    "Shimenawa's Reminiscence",
    "Tenacity of the Millelith",
    "The Exile",
    "Thundering Fury",
    "Thundersoother",
    "Tiny Miracle",
    "Vermillion Hereafter",
    "Viridescent Venerer",
    "Wanderer's Troupe",
    "Nymph's Dream",
    "Vourukasha's Glow",
    "Golden Troupe",
    "Marechaussee Hunter",
    "Song of Days Past",
    "Nighttime Whispers in the Echoing Woods",
    "Fragment of Harmonic Whimsy",
    "Unfinished Reverie",
  ];

const weapons = [


    "Akuoumaru",
    "Alley Hunter",
    "Amenoma Kageuchi",
    "Amos' Bow",
    "Apprentice's Notes",
    "Aqua Simulacra",
    "Aquila Favonia",
  
    "A Thousand Floating Dreams",
    "Beginner's Protector",
    "Blackcliff Agate",
    "Blackcliff Longsword",
    "Blackcliff Pole",
    "Blackcliff Slasher",
    "Blackcliff Warbow",
    "Black Tassel",
    "Bloodtainted Greatsword",
    "Calamity Queller",
    "Cinnabar Spindle",
    "Compound Bow",
    "Cool Steel",
    "Crescent Pike",
    "Dark Iron Sword",
    "Deathmatch",
    "Debate Club",
    "Dodoco Tales",
    "Dragon's Bane",
    "Dragonspine Spear",
    "Dull Blade",
    "Elegy for the End",
    "Emerald Orb",
    "End of the Line",
    "Engulfing Lightning",
    "Everlasting Moonglow",
    "Eye of Perception",
    "Fading Twilight",
    "Favonius Codex",
    "Favonius Greatsword",
    "Favonius Lance",
    "Favonius Sword",
    "Favonius Warbow",
    "Ferrous Shadow",
    "Festering Desire",
    "Fillet Blade",
    "Forest Regalia",
    "Freedom-Sworn",
    "Frostbearer",
    "Fruit of Fulfillment",
    "Hakushin Ring",
    "Halberd",
    "Hamayumi",
    "Haran Geppaku Futsu",
    "Harbinger of Dawn",
    "Hunter's Bow",
    "Hunter's Path",
    "Iron Point",
    "Iron Sting",
    "Kagotsurube Isshin",
    "Kagura's Verity",
    "Katsuragikiri Nagamasa",
    "Key of Khaj-Nisut",
    "King's Squire",
    "Kitain Cross Spear",
    "Lion's Roar",
    "Lithic Blade",
    "Lithic Spear",
    "Lost Prayer to the Sacred Winds",
    "Luxurious Sea-Lord",
    "Magic Guide",
    "Makhaira Aquamarine",
    "Mappa Mare",
    "Memory of Dust",
    "Messenger",
    "Missive Windspear",
    "Mistsplitter Reforged",
    "Mitternachts Waltz",
    "Moonpiercer",
    "Mouun's Moon",
    "Oathsworn Eye",
    "Old Merc's Pal",
    "Otherworldly Story",
    "Pocket Grimoire",
    "Polar Star",
    "Predator",
    "Primordial Jade Cutter",
    "Primordial Jade Winged-Spear",
    "Prized Isshin Blade",
    "Prototype Amber",
    "Prototype Archaic",
    "Prototype Crescent",
    "Prototype Rancour",
    "Prototype Starglitter",
    "Rainslasher",
    "Raven Bow",
    "Recurve Bow",
    "Redhorn Stonethresher",
    "Royal Bow",
    "Royal Greatsword",
    "Royal Grimoire",
    "Royal Longsword",
    "Royal Spear",
    "Rust",
    "Sacrificial Bow",
    "Sacrificial Fragments",
    "Sacrificial Greatsword",
    "Sacrificial Sword",
    "Sapwood Blade",
    "Seasoned Hunter's Bow",
    "Serpent Spine",
    "Sharpshooter's Oath",
    "Silver Sword",
    "Skyrider Greatsword",
    "Skyrider Sword",
    "Skyward Atlas",
    "Skyward Blade",
    "Skyward Harp",
    "Skyward Pride",
    "Skyward Spine",
    "Slingshot",
    "Snow-Tombed Starsilver",
    "Solar Pearl",
    "Song of Broken Pines",
    "Staff of Homa",
    "Staff of the Scarlet Sands",
    "Summit Shaper",
    "Sword of Descension",
    "The Alley Flash",
    "The Bell",
    "The Black Sword",
    "The Catch",
    "The Flute",
    "The Stringless",
    "The Unforged",
    "The Viridescent Hunt",
    "The Widsith",
    "Thrilling Tales of Dragon Slayers",
    "Thundering Pulse",
    "Toukabou Shigure",
    "Traveler's Handy Sword",
    "Tulaytullah's Remembrance",
    "Twin Nephrite",
    "Vortex Vanquisher",
    "Wandering Evenstar",
    "Waster Greatsword",
    "Wavebreaker's Fin",
    "Whiteblind",
    "White Iron Greatsword",
    "White Tassel",
    "Windblume Ode",
    "Wine and Song",
    "Wolf's Gravestone",
    "Xiphos' Moonlight",
    "Light of Foliar Incision",
    "Beacon of the Reed Sea",
    "Mailed Flower",
    "Jadefall's Splendor",
    "Ballad of the Fjords",
    "Finale of the Deep",
    "Fleuve Cendre Ferryman",
    "Flowing Purity",
    "Rightful Reward",
    "Sacrificial Jade",
    "Scion of the Blazing Sun",
    "Song of Stillness",
    "Talking Stick",
    "The First Great Magic",
    "Tidal Shadow",
    "Wolf-Fang",
    "Ballad of the Boundless Blue",
    "Cashflow Supervision",
    "Portable Power Saw",
    "Prospector's Drill",
    "Range Gauge",
    "The Dockhand's Assistant",
    "Tome of the Eternal Flow",
    "Splendor of Tranquil Waters",
    "Sword of Narzissenkreuz",
    "Ultimate Overlord's Mega Magic Sword",
    "Verdict",
    "Crane's Echoing Call",
    "Uraku Misugiri",
    "Dialogues of the Desert Sages",
  ];


  type BuildType = ReturnType<typeof Build.decode>;

const needsToMigrateId = (build: BuildType) => {
    // The old character id is ranging from (0, 86],
    // whereas the genshin-db character id is greater than 10000000
    if(build.character > 0 && build.character < 100) {
        return true;
    }
    return false;
}

const migrateId = (build: BuildType) => {
    const character_name = characters[build.character - 1];
    const weapon_names = build.weapons.map(weapon => weapons[weapon-1]);

    const character = genshindb.characters(character_name)
    console.assert(character, `Character '${character_name}' must exists`)
    build.character = character!.id;

    const build_weapons = weapon_names.map(weapon_name => {
        const weapon = genshindb.weapons(weapon_name)?.id;
        console.assert(weapon, `Weapon '${weapon_name}' in '${build.weapons}' must exists`)
        return weapon!;
    });

    build.weapons = build_weapons;

    const build_suits = build.suits.map(suit => {
        return {
            setCombos: suit.setCombos.map(setCombo => {
                const artifact_name = artifects[setCombo.set-1];
                const artifact = genshindb.artifacts(artifact_name)?.id;
                console.assert(artifact, `Artifact '${artifact_name}' must exists`)
                return {
                    set: artifact!,
                    count: setCombo.count
                }
            })
        }

    })

    build.suits = build_suits;

    return build
}

const migrateIdIfNeeded = (build: BuildType) => {
    if(needsToMigrateId(build)) {
        return migrateId(build);
    }
    return build;
}

export default migrateIdIfNeeded;
